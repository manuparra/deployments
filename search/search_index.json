{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"CANFAR Deployments","text":"<p>Welcome to the operational documentation for deploying and maintaining the CANFAR Science Platform. This repository contains Helm charts, Kubernetes configurations, CI/CD automation, and operations runbooks that power the platform infrastructure.</p>"},{"location":"#what-youll-find-here","title":"What You'll Find Here","text":"<p>This documentation is designed for platform operators, DevOps engineers, and infrastructure maintainers who deploy, configure, and manage CANFAR services.</p> <ul> <li> <p> Helm Charts</p> <p>Reusable deployment templates for CANFAR services with configurable values and environment overlays.</p> </li> <li> <p> Release Automation</p> <p>Automated CI/CD pipelines using GitHub Actions and Release Please for Helm chart versioning.</p> </li> <li> <p> Operations Runbooks</p> <p>Step-by-step procedures for releases, rollbacks, monitoring, and troubleshooting production deployments.</p> </li> <li> <p> Configuration Management</p> <p>Environment-specific overlays, secrets management, and Kubernetes resource definitions for staging and production.</p> </li> <li> <p> Documentation</p> <p>Automated MkDocs site deployment with operations guides and platform runbooks.</p> </li> <li> <p> Code Quality</p> <p>Pre-commit hooks, linting, and security scanning for infrastructure-as-code.</p> </li> </ul>"},{"location":"#quick-links","title":"Quick Links","text":"<ul> <li>CI/CD Pipelines - Understand GitHub Actions workflows for documentation and code quality</li> <li>Release Process - Follow the Helm chart release process and CANFAR platform schedule</li> <li>GitHub Repository - Browse source code, Helm charts, and configurations</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<p>If you're new to CANFAR deployments:</p> <ol> <li>Review the Release Process to understand our deployment workflow</li> <li>Explore the CI/CD Pipelines documentation to see how automation works</li> <li>Check the GitHub repository for Helm charts and configuration files</li> </ol>"},{"location":"#contributing","title":"Contributing","text":"<p>This is an operational repository for CANFAR platform infrastructure. Changes follow the standard pull request workflow with Release Please automation for versioning and changelog generation.</p> <p>For questions or support, contact the CADC operations team or visit the main CANFAR documentation.</p>"},{"location":"operations/","title":"Operations","text":"<p>Operational guides and runbooks for managing CANFAR platform infrastructure, releases, and deployments.</p>"},{"location":"operations/#overview","title":"Overview","text":"<p>This section provides comprehensive documentation for platform operators managing CANFAR deployments. Whether you're releasing new versions, troubleshooting issues, or maintaining infrastructure, these guides will help you follow best practices and ensure reliable operations.</p> <ul> <li> CI/CD Pipelines GitHub Actions workflows</li> <li> Release Process Release playbook and procedures</li> </ul>"},{"location":"operations/#key-responsibilities","title":"Key Responsibilities","text":""},{"location":"operations/#release-management","title":"Release Management","text":"<ul> <li>Coordinate releases using Release Please automation</li> <li>Review and merge release PRs with proper approvals</li> <li>Monitor post-release workflows and verify deployments</li> <li>Manage hotfixes and rollback procedures when needed</li> </ul>"},{"location":"operations/#infrastructure-operations","title":"Infrastructure Operations","text":"<ul> <li>Deploy Helm charts and configuration overlays</li> <li>Manage environment-specific configurations (staging, production)</li> <li>Monitor platform health and respond to incidents</li> <li>Maintain secrets and access controls</li> </ul>"},{"location":"operations/#cicd-maintenance","title":"CI/CD Maintenance","text":"<ul> <li>Keep GitHub Actions workflows up to date</li> <li>Monitor workflow runs and troubleshoot failures</li> <li>Update documentation and configuration files</li> </ul>"},{"location":"operations/#tools-technologies","title":"Tools &amp; Technologies","text":"<p>The CANFAR deployment infrastructure relies on:</p> <ul> <li>Kubernetes - Container orchestration platform</li> <li>Helm - Package manager for Kubernetes applications</li> <li>GitHub Actions - CI/CD automation and workflows</li> <li>Release Please - Automated release management and changelog generation</li> <li>MkDocs Material - Documentation site generation</li> <li>uv - Python package and dependency management</li> </ul>"},{"location":"operations/#getting-help","title":"Getting Help","text":"<p>For operational support or questions:</p> <ul> <li>Check the relevant runbook in this documentation</li> <li>Review recent GitHub Actions workflow runs for error logs</li> <li>Contact the CADC operations team</li> <li>Consult the main CANFAR documentation</li> </ul>"},{"location":"operations/#best-practices","title":"Best Practices","text":"<ol> <li>Always follow the release checklist - Skip no steps to ensure consistent, reliable releases</li> <li>Test in staging first - Validate changes in staging before promoting to production</li> <li>Monitor post-deployment - Watch metrics and logs after every deployment</li> <li>Document incidents - Capture lessons learned and update runbooks</li> <li>Keep secrets secure - Rotate credentials regularly and limit access</li> <li>Maintain audit trails - All changes go through pull requests with proper reviews</li> </ol>"},{"location":"operations/ci-cd/","title":"CI/CD Pipelines","text":"<p>The deployments repository uses GitHub Actions to automate documentation and code quality tasks.</p>"},{"location":"operations/ci-cd/#documentation-deployment-docsyml","title":"Documentation Deployment (<code>docs.yml</code>)","text":"<p>Automatically builds and deploys the MkDocs documentation site to GitHub Pages.</p>"},{"location":"operations/ci-cd/#triggers","title":"Triggers","text":"<ul> <li>Pushes to <code>main</code> that modify <code>docs/**</code>, <code>mkdocs.yml</code>, or <code>pyproject.toml</code></li> <li>Manual dispatch with required reason field</li> </ul>"},{"location":"operations/ci-cd/#workflow-steps","title":"Workflow Steps","text":"<ol> <li>Checkout: Fetches full git history (required for git-revision-date plugin)</li> <li>Install uv: Sets up the uv package manager</li> <li>Setup Python: Installs Python using uv</li> <li>Install dependencies: Runs <code>uv sync</code> to install all dependencies from <code>pyproject.toml</code></li> <li>Deploy: Runs <code>uv run mkdocs gh-deploy --force</code> to build and publish to <code>gh-pages</code> branch</li> </ol>"},{"location":"operations/ci-cd/#requirements","title":"Requirements","text":"<ul> <li><code>contents: write</code> permission for pushing to <code>gh-pages</code> branch</li> <li>Dependencies managed in <code>pyproject.toml</code>:</li> <li><code>mkdocs-material</code> - Material theme for MkDocs</li> <li><code>mkdocs-git-revision-date-localized-plugin</code> - Git revision dates in docs</li> </ul>"},{"location":"operations/ci-cd/#pre-commit-checks-pre-commityml","title":"Pre-commit Checks (<code>pre-commit.yml</code>)","text":"<p>Runs pre-commit hooks on all files to ensure code quality and consistency.</p>"},{"location":"operations/ci-cd/#triggers_1","title":"Triggers","text":"<ul> <li>Pull requests to <code>main</code></li> <li>Manual dispatch</li> </ul>"},{"location":"operations/ci-cd/#what-it-checks","title":"What it checks","text":"<ul> <li>YAML syntax and formatting</li> <li>JSON formatting</li> <li>File permissions and naming</li> <li>Security scanning for hardcoded secrets</li> <li>Python code quality (if applicable)</li> </ul>"},{"location":"operations/release-process/","title":"Release Process","text":"<p>Documentation for releasing Helm charts and platform configuration for the CANFAR Science Platform.</p>"},{"location":"operations/release-process/#canfar-release-cycle","title":"CANFAR Release Cycle","text":"<p>The CANFAR Science Platform uses a version format <code>YYYY.Q</code> for quarterly releases:</p> <ul> <li>2025.1 - Q1 2025 release</li> <li>2025.2 - Q2 2025 release</li> </ul> <p>Between releases, hotfix patches may be released as needed for critical issues.</p>"},{"location":"operations/release-process/#helm-chart-releases","title":"Helm Chart Releases","text":"<p>Each Helm chart in this repository is versioned independently:</p> <ul> <li>Charts follow semantic versioning (<code>MAJOR.MINOR.PATCH</code>)</li> <li>Release Please automation manages changelog and version bumps</li> <li>Each chart has its own release cycle and <code>CHANGELOG.md</code></li> </ul>"},{"location":"operations/release-process/#branching-model","title":"Branching Model","text":"<ul> <li><code>main</code> is the integration branch - all work merges via pull requests</li> <li>Use conventional commits for automatic changelog generation</li> <li>Hotfixes branch from the latest release tag and merge back to <code>main</code></li> </ul>"},{"location":"operations/release-process/#release-workflow","title":"Release Workflow","text":""},{"location":"operations/release-process/#1-making-changes","title":"1. Making Changes","text":"<ul> <li>Create a pull request to <code>main</code></li> <li>Use conventional commit messages (e.g., <code>feat:</code>, <code>fix:</code>, <code>docs:</code>)</li> <li>Add appropriate labels for changelog categorization</li> <li>Ensure all CI checks pass</li> </ul>"},{"location":"operations/release-process/#2-release-please-automation","title":"2. Release Please Automation","text":"<p>Release Please automatically:</p> <ul> <li>Detects changes to Helm charts</li> <li>Determines version bump based on conventional commits</li> <li>Updates <code>CHANGELOG.md</code> and <code>Chart.yaml</code></li> <li>Creates a release PR for each affected chart</li> </ul>"},{"location":"operations/release-process/#3-review-and-merge","title":"3. Review and Merge","text":"<ul> <li>Review the generated changelog and version bump</li> <li>Verify Helm chart values and configuration</li> <li>Obtain required approvals</li> <li>Merge the release PR to create tags and GitHub releases</li> </ul>"},{"location":"operations/release-process/#4-deployment","title":"4. Deployment","text":"<p>After release PR is merged:</p> <ul> <li>Git tag is created automatically</li> <li>GitHub release is published with changelog</li> <li>Deploy to staging environment first</li> <li>Run validation and smoke tests</li> <li>Deploy to production after successful validation</li> </ul>"},{"location":"operations/release-process/#hotfix-process","title":"Hotfix Process","text":"<p>For critical issues requiring immediate patches:</p> <ol> <li>Create <code>hotfix/&lt;issue&gt;</code> branch from affected release tag</li> <li>Apply fix and create PR to <code>main</code></li> <li>Release Please generates patch release PR</li> <li>Follow standard review and merge process</li> <li>Deploy hotfix after testing</li> </ol>"},{"location":"operations/release-process/#pre-deployment-checklist","title":"Pre-deployment Checklist","text":"<p>Before deploying a Helm chart release:</p> <ul> <li>\u2705 Review CHANGELOG for all changes</li> <li>\u2705 Verify chart values match intended configuration</li> <li>\u2705 Check for breaking changes or migrations</li> <li>\u2705 Ensure dependent services are compatible</li> <li>\u2705 Prepare rollback plan</li> </ul>"},{"location":"operations/release-process/#rollback-strategy","title":"Rollback Strategy","text":"<p>If issues are detected after deployment:</p> <ol> <li>Roll back to previous Helm chart version</li> <li>Document issue and root cause</li> <li>Create hotfix branch to address problem</li> <li>Follow hotfix process for patch release</li> </ol>"}]}